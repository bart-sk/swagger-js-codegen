/**
* {{&summary}}
* @method
{{#externalDocs}}
* @see {@link {{&url}}|{{#description}}{{&description}}{{/description}}{{^description}}External docs{{/description}}}
{{/externalDocs}}
* @name {{&className}}#{{&methodName}}
{{#parameters}}
    {{^isSingleton}} * @param {{=<% %>=}}{<%&type%>}<%={{ }}=%> {{&camelCaseName}} - {{&description}}{{/isSingleton}}
{{/parameters}}
*/
{{&methodName}}({{#parameters}}{{#isPathParameter}}{{&camelCaseName}}{{&cardinality}}: {{> type}},{{/isPathParameter}}{{/parameters}}parameters?: {
{{#parameters}}{{^isPathParameter}}{{^isSingleton}}'{{&camelCaseName}}'{{&cardinality}}: {{> type}},
{{/isSingleton}}{{/isPathParameter}}{{/parameters}}}): Promise<{{#responses}} {{#200}} {{> type}} {{/200}}{{/responses}}> {
    let path = '{{&path}}';
    let body: any;
    let queryParameters: QueryParameters = {};
    let headers: any = {};
    let form: any = {};
{{#headers}}
    headers['{{&name}}'] = {{&value}};
{{/headers}}

{{#parameters}}

    {{#isQueryParameter}}
        {{#isSingleton}}
            queryParameters['{{&name}}'] = '{{&singleton}}';
        {{/isSingleton}}
        {{^isSingleton}}
            {{#isPatternType}}
                Object.keys(parameters).forEach(function(parameterName) {
                    if(new RegExp('{{&pattern}}').test(parameterName)){
                        queryParameters[parameterName] = parameters[parameterName]!;
                    }
                });
            {{/isPatternType}}
            {{^isPatternType}}
                if(parameters['{{&camelCaseName}}'] !== undefined) {
                    queryParameters['{{&name}}'] = parameters['{{&camelCaseName}}']!;
                }
            {{/isPatternType}}
        {{/isSingleton}}
    {{/isQueryParameter}}

    {{#isPathParameter}}
        path = path.replace('{{=<% %>=}}{<%&name%>}<%={{ }}=%>', {{&camelCaseName}}.toString());
    {{/isPathParameter}}

    {{#isHeaderParameter}}
        {{#isSingleton}}
            headers['{{&name}}'] = '{{&singleton}}';
        {{/isSingleton}}
        {{^isSingleton}}
            if(parameters['{{&camelCaseName}}'] !== undefined) {
                headers['{{&name}}'] = parameters['{{&camelCaseName}}']!;
            }
        {{/isSingleton}}
    {{/isHeaderParameter}}

    {{#isBodyParameter}}
        if(parameters['{{&camelCaseName}}'] !== undefined) {
            body = parameters['{{&camelCaseName}}'];
        }
    {{/isBodyParameter}}

    {{#isFormParameter}}
        {{#isSingleton}}
            form['{{&name}}'] = '{{&singleton}}';
        {{/isSingleton}}
        {{^isSingleton}}
            if(parameters['{{&camelCaseName}}'] !== undefined) {
                form['{{&name}}'] = parameters['{{&camelCaseName}}'];
            }
        {{/isSingleton}}
    {{/isFormParameter}}

    {{#required}}
        {{^isPathParameter}}
        if(parameters['{{&camelCaseName}}'] === undefined) {
            throw new Error('Missing required {{&paramType}} parameter: {{&camelCaseName}}');
        }
        {{/isPathParameter}}
    {{/required}}

{{/parameters}}

    {{^isBodyParameter}}
        {{#isPOST}}
            form = queryParameters;
            queryParameters = {};
        {{/isPOST}}
    {{/isBodyParameter}}

    return this.request('{{method}}', `${this.baseUrl}${path}`, body, headers, queryParameters, form);
}
